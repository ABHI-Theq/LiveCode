// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum UserRole {
  ADMIN
  USER
  PREMIUM_USER
}
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  image         String?
  myPlayground Playground[]
  starredPlayground StarMark[]
  accounts      Account[]
  role          UserRole        @default(USER) // Default role is 'user', can be changed to 'admin' or others as needed
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

enum Templates {
  REACTJS
  NEXTJS
  EXPRESS
  VUE
  HONO
  ANGULAR
}

model Playground{
  id String @id @default(cuid())
  title String 
  description String
  template Templates @default(REACTJS)

  starmark StarMark[]
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateFiles TemplateFile[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TemplateFile {
  id String @id @default(cuid())
  content Json
  createdAt DateTime @default(now())
  updated DateTime @updatedAt
  playgroundId String @unique
  playground Playground @relation(fields: [playgroundId],references: [id],onDelete: Cascade)

}

model StarMark{
  id String @id @default(cuid())
  userId String
  playgroundId String
  isMarked Boolean
  createdAt DateTime @default(now())
  updatedAr DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  playground Playground @relation(fields: [playgroundId],references: [id],onDelete: Cascade)

  @@unique([userId,playgroundId])
}